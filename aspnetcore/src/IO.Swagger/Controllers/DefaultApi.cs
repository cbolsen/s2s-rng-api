/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create draws for quick pick products</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/s2s-rng-api/v1.0/draws/quick-picks")]
        [ValidateModelState]
        [SwaggerOperation("PostDrawsQuickPicks")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public virtual IActionResult PostDrawsQuickPicks([FromBody]Body1 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"serverVersion\" : \"9.3\",\n  \"transactionStatus\" : {\n    \"code\" : 0,\n    \"description\" : \"description\"\n  },\n  \"drawResults\" : [ {\n    \"recordId\" : \"EX191109870000000125\",\n    \"productId\" : 0,\n    \"sets\" : [ [ 0, 0 ], [ 0, 0 ] ],\n    \"clientRequestId\" : \"RQID-31234545-32\",\n    \"drawTime\" : \"2020-09-30T18:30:23Z\"\n  }, {\n    \"recordId\" : \"EX191109870000000125\",\n    \"productId\" : 0,\n    \"sets\" : [ [ 0, 0 ], [ 0, 0 ] ],\n    \"clientRequestId\" : \"RQID-31234545-32\",\n    \"drawTime\" : \"2020-09-30T18:30:23Z\"\n  } ],\n  \"clientTransaction-id\" : \"clientTransaction-id\",\n  \"rngBusinessDay\" : 200930,\n  \"serverId\" : \"RNG-TEST-87\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create draws for regular draw products</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/s2s-rng-api/v1.0/draws/regular-draws")]
        [ValidateModelState]
        [SwaggerOperation("PostDrawsRegularDraws")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        public virtual IActionResult PostDrawsRegularDraws([FromBody]Body body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"serverVersion\" : \"9.3\",\n  \"transactionStatus\" : {\n    \"code\" : 0,\n    \"description\" : \"description\"\n  },\n  \"drawResults\" : [ {\n    \"recordId\" : \"EX191109870000000125\",\n    \"productId\" : 0,\n    \"sets\" : [ [ 0, 0 ], [ 0, 0 ] ],\n    \"clientRequestId\" : \"RQID-31234545-32\",\n    \"drawMatrix\" : {\n      \"minValue\" : 1,\n      \"setSize\" : 6,\n      \"withReplacement\" : true,\n      \"maxValue\" : 49,\n      \"exclusions\" : [ 0, 0 ]\n    },\n    \"drawTime\" : \"2020-09-30T18:30:23Z\",\n    \"distribution\" : {\n      \"depletionType\" : \"NoDepletion\",\n      \"values\" : [ 0, 0 ]\n    },\n    \"recordHandle\" : 0\n  }, {\n    \"recordId\" : \"EX191109870000000125\",\n    \"productId\" : 0,\n    \"sets\" : [ [ 0, 0 ], [ 0, 0 ] ],\n    \"clientRequestId\" : \"RQID-31234545-32\",\n    \"drawMatrix\" : {\n      \"minValue\" : 1,\n      \"setSize\" : 6,\n      \"withReplacement\" : true,\n      \"maxValue\" : 49,\n      \"exclusions\" : [ 0, 0 ]\n    },\n    \"drawTime\" : \"2020-09-30T18:30:23Z\",\n    \"distribution\" : {\n      \"depletionType\" : \"NoDepletion\",\n      \"values\" : [ 0, 0 ]\n    },\n    \"recordHandle\" : 0\n  } ],\n  \"testMode\" : true,\n  \"clientTransaction-id\" : \"clientTransaction-id\",\n  \"serverTime\" : \"2020-09-30T18:30:23Z\",\n  \"rngBusinessDay\" : 200930,\n  \"serverId\" : \"RNG-TEST-87\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
