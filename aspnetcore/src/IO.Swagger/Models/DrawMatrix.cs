/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The RNG draw parameter matrix. The product definition may or may not allow overriding of these values
    /// </summary>
    [DataContract]
    public partial class DrawMatrix : IEquatable<DrawMatrix>
    { 
        /// <summary>
        /// How many numbers in each set
        /// </summary>
        /// <value>How many numbers in each set</value>
        [DataMember(Name="setSize")]
        public int? SetSize { get; set; }

        /// <summary>
        /// Lowest number that can be drawn
        /// </summary>
        /// <value>Lowest number that can be drawn</value>
        [DataMember(Name="minValue")]
        public int? MinValue { get; set; }

        /// <summary>
        /// Highest number that can be drawn
        /// </summary>
        /// <value>Highest number that can be drawn</value>
        [DataMember(Name="maxValue")]
        public int? MaxValue { get; set; }

        /// <summary>
        /// Specifies whether drawn numbers are replaced within a set
        /// </summary>
        /// <value>Specifies whether drawn numbers are replaced within a set</value>
        [DataMember(Name="withReplacement")]
        public bool? WithReplacement { get; set; }

        /// <summary>
        /// Values to be excluded from the draw
        /// </summary>
        /// <value>Values to be excluded from the draw</value>
        [DataMember(Name="exclusions")]
        public List<int?> Exclusions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DrawMatrix {\n");
            sb.Append("  SetSize: ").Append(SetSize).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  WithReplacement: ").Append(WithReplacement).Append("\n");
            sb.Append("  Exclusions: ").Append(Exclusions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DrawMatrix)obj);
        }

        /// <summary>
        /// Returns true if DrawMatrix instances are equal
        /// </summary>
        /// <param name="other">Instance of DrawMatrix to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DrawMatrix other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SetSize == other.SetSize ||
                    SetSize != null &&
                    SetSize.Equals(other.SetSize)
                ) && 
                (
                    MinValue == other.MinValue ||
                    MinValue != null &&
                    MinValue.Equals(other.MinValue)
                ) && 
                (
                    MaxValue == other.MaxValue ||
                    MaxValue != null &&
                    MaxValue.Equals(other.MaxValue)
                ) && 
                (
                    WithReplacement == other.WithReplacement ||
                    WithReplacement != null &&
                    WithReplacement.Equals(other.WithReplacement)
                ) && 
                (
                    Exclusions == other.Exclusions ||
                    Exclusions != null &&
                    Exclusions.SequenceEqual(other.Exclusions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SetSize != null)
                    hashCode = hashCode * 59 + SetSize.GetHashCode();
                    if (MinValue != null)
                    hashCode = hashCode * 59 + MinValue.GetHashCode();
                    if (MaxValue != null)
                    hashCode = hashCode * 59 + MaxValue.GetHashCode();
                    if (WithReplacement != null)
                    hashCode = hashCode * 59 + WithReplacement.GetHashCode();
                    if (Exclusions != null)
                    hashCode = hashCode * 59 + Exclusions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DrawMatrix left, DrawMatrix right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DrawMatrix left, DrawMatrix right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
