/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Optional data passed through to the audit process and optionally included in CSV extract files it creates
    /// </summary>
    [DataContract]
    public partial class ExtractData : IEquatable<ExtractData>
    { 
        /// <summary>
        /// Used to define the CSV extract report options
        /// </summary>
        /// <value>Used to define the CSV extract report options</value>
        [DataMember(Name="extractType")]
        public string ExtractType { get; set; }

        /// <summary>
        /// Positional data values that can be included in the CSV extract files. Field positions must be the same for all draws using the same extract type
        /// </summary>
        /// <value>Positional data values that can be included in the CSV extract files. Field positions must be the same for all draws using the same extract type</value>
        [DataMember(Name="extractFields")]
        public List<string> ExtractFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtractData {\n");
            sb.Append("  ExtractType: ").Append(ExtractType).Append("\n");
            sb.Append("  ExtractFields: ").Append(ExtractFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExtractData)obj);
        }

        /// <summary>
        /// Returns true if ExtractData instances are equal
        /// </summary>
        /// <param name="other">Instance of ExtractData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExtractType == other.ExtractType ||
                    ExtractType != null &&
                    ExtractType.Equals(other.ExtractType)
                ) && 
                (
                    ExtractFields == other.ExtractFields ||
                    ExtractFields != null &&
                    ExtractFields.SequenceEqual(other.ExtractFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExtractType != null)
                    hashCode = hashCode * 59 + ExtractType.GetHashCode();
                    if (ExtractFields != null)
                    hashCode = hashCode * 59 + ExtractFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExtractData left, ExtractData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExtractData left, ExtractData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
