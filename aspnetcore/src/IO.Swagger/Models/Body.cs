/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Body : IEquatable<Body>
    { 
        /// <summary>
        /// Client&#x27;s unique ID for this transaction
        /// </summary>
        /// <value>Client&#x27;s unique ID for this transaction</value>
        [DataMember(Name="clientTransactionId")]
        public string ClientTransactionId { get; set; }

        /// <summary>
        /// Client&#x27;s current business day. Format is YYMMDD.
        /// </summary>
        /// <value>Client&#x27;s current business day. Format is YYMMDD.</value>
        [DataMember(Name="clientBusinessDay")]
        public int? ClientBusinessDay { get; set; }

        /// <summary>
        /// Marks the draw results as \&quot;test mode\&quot; and not valid for use
        /// </summary>
        /// <value>Marks the draw results as \&quot;test mode\&quot; and not valid for use</value>
        [DataMember(Name="testMode")]
        public bool? TestMode { get; set; }

        /// <summary>
        /// Draw personnel names and login times to be included in the draw reports
        /// </summary>
        /// <value>Draw personnel names and login times to be included in the draw reports</value>
        [DataMember(Name="drawUsers")]
        public List<DrawUsers> DrawUsers { get; set; }

        /// <summary>
        /// One or more draw requests to be processed
        /// </summary>
        /// <value>One or more draw requests to be processed</value>
        [Required]
        [DataMember(Name="drawRequests")]
        public List<DrawsregulardrawsDrawRequests> DrawRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body {\n");
            sb.Append("  ClientTransactionId: ").Append(ClientTransactionId).Append("\n");
            sb.Append("  ClientBusinessDay: ").Append(ClientBusinessDay).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  DrawUsers: ").Append(DrawUsers).Append("\n");
            sb.Append("  DrawRequests: ").Append(DrawRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Body)obj);
        }

        /// <summary>
        /// Returns true if Body instances are equal
        /// </summary>
        /// <param name="other">Instance of Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientTransactionId == other.ClientTransactionId ||
                    ClientTransactionId != null &&
                    ClientTransactionId.Equals(other.ClientTransactionId)
                ) && 
                (
                    ClientBusinessDay == other.ClientBusinessDay ||
                    ClientBusinessDay != null &&
                    ClientBusinessDay.Equals(other.ClientBusinessDay)
                ) && 
                (
                    TestMode == other.TestMode ||
                    TestMode != null &&
                    TestMode.Equals(other.TestMode)
                ) && 
                (
                    DrawUsers == other.DrawUsers ||
                    DrawUsers != null &&
                    DrawUsers.SequenceEqual(other.DrawUsers)
                ) && 
                (
                    DrawRequests == other.DrawRequests ||
                    DrawRequests != null &&
                    DrawRequests.SequenceEqual(other.DrawRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientTransactionId != null)
                    hashCode = hashCode * 59 + ClientTransactionId.GetHashCode();
                    if (ClientBusinessDay != null)
                    hashCode = hashCode * 59 + ClientBusinessDay.GetHashCode();
                    if (TestMode != null)
                    hashCode = hashCode * 59 + TestMode.GetHashCode();
                    if (DrawUsers != null)
                    hashCode = hashCode * 59 + DrawUsers.GetHashCode();
                    if (DrawRequests != null)
                    hashCode = hashCode * 59 + DrawRequests.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Body left, Body right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Body left, Body right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
