/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Initial distribution values and depletion type used for distribution-type products
    /// </summary>
    [DataContract]
    public partial class Distribution : IEquatable<Distribution>
    { 
        /// <summary>
        /// Initial distribution values
        /// </summary>
        /// <value>Initial distribution values</value>
        [DataMember(Name="values")]
        public List<int?> Values { get; set; }

        /// <summary>
        /// Specifies method of depletion for the distribution values
        /// </summary>
        /// <value>Specifies method of depletion for the distribution values</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DepletionTypeEnum
        {
            /// <summary>
            /// Enum NoDepletionEnum for NoDepletion
            /// </summary>
            [EnumMember(Value = "NoDepletion")]
            NoDepletionEnum = 0,
            /// <summary>
            /// Enum DecreaseEntryEnum for DecreaseEntry
            /// </summary>
            [EnumMember(Value = "DecreaseEntry")]
            DecreaseEntryEnum = 1,
            /// <summary>
            /// Enum RemoveEntryEnum for RemoveEntry
            /// </summary>
            [EnumMember(Value = "RemoveEntry")]
            RemoveEntryEnum = 2        }

        /// <summary>
        /// Specifies method of depletion for the distribution values
        /// </summary>
        /// <value>Specifies method of depletion for the distribution values</value>
        [DataMember(Name="depletionType")]
        public DepletionTypeEnum? DepletionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Distribution {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  DepletionType: ").Append(DepletionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Distribution)obj);
        }

        /// <summary>
        /// Returns true if Distribution instances are equal
        /// </summary>
        /// <param name="other">Instance of Distribution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Distribution other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Values == other.Values ||
                    Values != null &&
                    Values.SequenceEqual(other.Values)
                ) && 
                (
                    DepletionType == other.DepletionType ||
                    DepletionType != null &&
                    DepletionType.Equals(other.DepletionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    if (DepletionType != null)
                    hashCode = hashCode * 59 + DepletionType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Distribution left, Distribution right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Distribution left, Distribution right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
