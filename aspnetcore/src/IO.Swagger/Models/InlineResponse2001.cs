/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2001 : IEquatable<InlineResponse2001>
    { 
        /// <summary>
        /// Client&#x27;s unique ID for this transaction
        /// </summary>
        /// <value>Client&#x27;s unique ID for this transaction</value>
        [DataMember(Name="clientTransaction-id")]
        public string ClientTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatus
        /// </summary>
        [DataMember(Name="transactionStatus")]
        public Status TransactionStatus { get; set; }

        /// <summary>
        /// RNG server identifier
        /// </summary>
        /// <value>RNG server identifier</value>
        [DataMember(Name="serverId")]
        public string ServerId { get; set; }

        /// <summary>
        /// RNG server version number
        /// </summary>
        /// <value>RNG server version number</value>
        [DataMember(Name="serverVersion")]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Business day under which the transaction was recorded. Format is YYMMDD.
        /// </summary>
        /// <value>Business day under which the transaction was recorded. Format is YYMMDD.</value>
        [DataMember(Name="rngBusinessDay")]
        public int? RngBusinessDay { get; set; }

        /// <summary>
        /// Array of results objects, corresponding to array of requests
        /// </summary>
        /// <value>Array of results objects, corresponding to array of requests</value>
        [Required]
        [DataMember(Name="drawResults")]
        public List<InlineResponse2001DrawResults> DrawResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  ClientTransactionId: ").Append(ClientTransactionId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  RngBusinessDay: ").Append(RngBusinessDay).Append("\n");
            sb.Append("  DrawResults: ").Append(DrawResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2001)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientTransactionId == other.ClientTransactionId ||
                    ClientTransactionId != null &&
                    ClientTransactionId.Equals(other.ClientTransactionId)
                ) && 
                (
                    TransactionStatus == other.TransactionStatus ||
                    TransactionStatus != null &&
                    TransactionStatus.Equals(other.TransactionStatus)
                ) && 
                (
                    ServerId == other.ServerId ||
                    ServerId != null &&
                    ServerId.Equals(other.ServerId)
                ) && 
                (
                    ServerVersion == other.ServerVersion ||
                    ServerVersion != null &&
                    ServerVersion.Equals(other.ServerVersion)
                ) && 
                (
                    RngBusinessDay == other.RngBusinessDay ||
                    RngBusinessDay != null &&
                    RngBusinessDay.Equals(other.RngBusinessDay)
                ) && 
                (
                    DrawResults == other.DrawResults ||
                    DrawResults != null &&
                    DrawResults.SequenceEqual(other.DrawResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientTransactionId != null)
                    hashCode = hashCode * 59 + ClientTransactionId.GetHashCode();
                    if (TransactionStatus != null)
                    hashCode = hashCode * 59 + TransactionStatus.GetHashCode();
                    if (ServerId != null)
                    hashCode = hashCode * 59 + ServerId.GetHashCode();
                    if (ServerVersion != null)
                    hashCode = hashCode * 59 + ServerVersion.GetHashCode();
                    if (RngBusinessDay != null)
                    hashCode = hashCode * 59 + RngBusinessDay.GetHashCode();
                    if (DrawResults != null)
                    hashCode = hashCode * 59 + DrawResults.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2001 left, InlineResponse2001 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2001 left, InlineResponse2001 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
