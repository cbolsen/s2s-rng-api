/*
 * S2S RNG API
 *
 * Szrek2Solutions Random Number Generator API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DrawsregulardrawsDrawRequests : IEquatable<DrawsregulardrawsDrawRequests>
    { 
        /// <summary>
        /// Client&#x27;s unique identifier for this draw request
        /// </summary>
        /// <value>Client&#x27;s unique identifier for this draw request</value>
        [DataMember(Name="clientRequestId")]
        public string ClientRequestId { get; set; }

        /// <summary>
        /// An extra text string that will appear in the draw reports and is also appended to the draw report file names
        /// </summary>
        /// <value>An extra text string that will appear in the draw reports and is also appended to the draw report file names</value>
        [DataMember(Name="drawText")]
        public string DrawText { get; set; }

        /// <summary>
        /// A hash string that will be included in the signed data, such as the SHA-1 hash of the bets
        /// </summary>
        /// <value>A hash string that will be included in the signed data, such as the SHA-1 hash of the bets</value>
        [DataMember(Name="drawHash")]
        public byte[] DrawHash { get; set; }

        /// <summary>
        /// Number to assign to this draw. Shown in draw reports and file names
        /// </summary>
        /// <value>Number to assign to this draw. Shown in draw reports and file names</value>
        [DataMember(Name="drawNumber")]
        public int? DrawNumber { get; set; }

        /// <summary>
        /// Identifier of the product definition to be drawn. The product defines all draw parameters, and MAY allow them to be overridden with the parameters below.
        /// </summary>
        /// <value>Identifier of the product definition to be drawn. The product defines all draw parameters, and MAY allow them to be overridden with the parameters below.</value>
        [Required]
        [DataMember(Name="productId")]
        public int? ProductId { get; set; }

        /// <summary>
        /// How many sets of numbers to draw
        /// </summary>
        /// <value>How many sets of numbers to draw</value>
        [Required]
        [DataMember(Name="numberOfSets")]
        public int? NumberOfSets { get; set; }

        /// <summary>
        /// Gets or Sets DrawMatrix
        /// </summary>
        [DataMember(Name="drawMatrix")]
        public DrawMatrix DrawMatrix { get; set; }

        /// <summary>
        /// Gets or Sets Distribution
        /// </summary>
        [DataMember(Name="distribution")]
        public Distribution Distribution { get; set; }

        /// <summary>
        /// Gets or Sets ExtractData
        /// </summary>
        [DataMember(Name="extractData")]
        public ExtractData ExtractData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DrawsregulardrawsDrawRequests {\n");
            sb.Append("  ClientRequestId: ").Append(ClientRequestId).Append("\n");
            sb.Append("  DrawText: ").Append(DrawText).Append("\n");
            sb.Append("  DrawHash: ").Append(DrawHash).Append("\n");
            sb.Append("  DrawNumber: ").Append(DrawNumber).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  NumberOfSets: ").Append(NumberOfSets).Append("\n");
            sb.Append("  DrawMatrix: ").Append(DrawMatrix).Append("\n");
            sb.Append("  Distribution: ").Append(Distribution).Append("\n");
            sb.Append("  ExtractData: ").Append(ExtractData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DrawsregulardrawsDrawRequests)obj);
        }

        /// <summary>
        /// Returns true if DrawsregulardrawsDrawRequests instances are equal
        /// </summary>
        /// <param name="other">Instance of DrawsregulardrawsDrawRequests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DrawsregulardrawsDrawRequests other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientRequestId == other.ClientRequestId ||
                    ClientRequestId != null &&
                    ClientRequestId.Equals(other.ClientRequestId)
                ) && 
                (
                    DrawText == other.DrawText ||
                    DrawText != null &&
                    DrawText.Equals(other.DrawText)
                ) && 
                (
                    DrawHash == other.DrawHash ||
                    DrawHash != null &&
                    DrawHash.Equals(other.DrawHash)
                ) && 
                (
                    DrawNumber == other.DrawNumber ||
                    DrawNumber != null &&
                    DrawNumber.Equals(other.DrawNumber)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    NumberOfSets == other.NumberOfSets ||
                    NumberOfSets != null &&
                    NumberOfSets.Equals(other.NumberOfSets)
                ) && 
                (
                    DrawMatrix == other.DrawMatrix ||
                    DrawMatrix != null &&
                    DrawMatrix.Equals(other.DrawMatrix)
                ) && 
                (
                    Distribution == other.Distribution ||
                    Distribution != null &&
                    Distribution.Equals(other.Distribution)
                ) && 
                (
                    ExtractData == other.ExtractData ||
                    ExtractData != null &&
                    ExtractData.Equals(other.ExtractData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientRequestId != null)
                    hashCode = hashCode * 59 + ClientRequestId.GetHashCode();
                    if (DrawText != null)
                    hashCode = hashCode * 59 + DrawText.GetHashCode();
                    if (DrawHash != null)
                    hashCode = hashCode * 59 + DrawHash.GetHashCode();
                    if (DrawNumber != null)
                    hashCode = hashCode * 59 + DrawNumber.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (NumberOfSets != null)
                    hashCode = hashCode * 59 + NumberOfSets.GetHashCode();
                    if (DrawMatrix != null)
                    hashCode = hashCode * 59 + DrawMatrix.GetHashCode();
                    if (Distribution != null)
                    hashCode = hashCode * 59 + Distribution.GetHashCode();
                    if (ExtractData != null)
                    hashCode = hashCode * 59 + ExtractData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DrawsregulardrawsDrawRequests left, DrawsregulardrawsDrawRequests right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DrawsregulardrawsDrawRequests left, DrawsregulardrawsDrawRequests right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
